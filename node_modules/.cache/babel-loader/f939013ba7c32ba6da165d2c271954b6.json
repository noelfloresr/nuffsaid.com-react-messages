{"ast":null,"code":"var _jsxFileName = \"/Users/noelflores/Documents/projects/tests/nuffsaid.com-react-messages/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport generateMessage from \"./Api\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport styles from \"./App.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardRow = {\n  flex: 1,\n  minWidth: \"350px\"\n};\nconst cardError = {\n  marginBottom: \"15px\",\n  backgroundColor: \"#F56236\"\n};\nconst cardWarning = {\n  marginBottom: \"15px\",\n  backgroundColor: \"#FCE788\"\n};\nconst cardInfo = {\n  marginBottom: \"15px\",\n  backgroundColor: \"#88FCA3\"\n};\nconst actionButton = {\n  backgroundColor: \"#88FCA3\"\n};\n\nconst App = () => {\n  _s();\n\n  var _errorMessages$map, _warningMessages$map, _infoMessages$map;\n\n  const [errorMessages, setErrorMessages] = useState([]);\n  const [warningMessages, setWarningMessages] = useState([]);\n  const [infoMessages, setInfoMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingLabel, setLoadingLabel] = useState(\"Stop\");\n\n  const handleClear = () => {\n    setErrorMessages([]);\n    setWarningMessages([]);\n    setInfoMessages([]);\n  };\n\n  const handleLoading = () => {\n    isLoading ? setIsLoading(false) : setIsLoading(true);\n    isLoading ? setLoadingLabel(\"Stop\") : setLoadingLabel(\"Play\");\n  };\n\n  useEffect(() => {\n    if (isLoading) {\n      const cleanUp = generateMessage(message => {\n        switch (message.priority) {\n          case 0:\n            setErrorMessages(oldMessages => [...oldMessages, message]);\n            break;\n\n          case 1:\n            setWarningMessages(oldMessages => [...oldMessages, message]);\n            break;\n\n          case 2:\n            setInfoMessages(oldMessages => [...oldMessages, message]);\n            break;\n        }\n      });\n      return cleanUp;\n    }\n  }, [setErrorMessages, setWarningMessages, setInfoMessages, isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"nuffsaid.com Coding Challenge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.actionButtons,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: actionButton,\n        onClick: () => setIsLoading(false),\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: actionButton,\n        onClick: handleClear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cardContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardRow,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Error type 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Count \", errorMessages.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), errorMessages === null || errorMessages === void 0 ? void 0 : (_errorMessages$map = errorMessages.map) === null || _errorMessages$map === void 0 ? void 0 : _errorMessages$map.call(errorMessages, msg => /*#__PURE__*/_jsxDEV(Card, {\n          style: cardError,\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: msg === null || msg === void 0 ? void 0 : msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, msg === null || msg === void 0 ? void 0 : msg.message, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardRow,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Error type 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Count \", warningMessages.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), warningMessages === null || warningMessages === void 0 ? void 0 : (_warningMessages$map = warningMessages.map) === null || _warningMessages$map === void 0 ? void 0 : _warningMessages$map.call(warningMessages, msg => /*#__PURE__*/_jsxDEV(Card, {\n          style: cardWarning,\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: msg === null || msg === void 0 ? void 0 : msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, msg === null || msg === void 0 ? void 0 : msg.message, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardRow,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Error type 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Count \", infoMessages.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), infoMessages === null || infoMessages === void 0 ? void 0 : (_infoMessages$map = infoMessages.map) === null || _infoMessages$map === void 0 ? void 0 : _infoMessages$map.call(infoMessages, msg => /*#__PURE__*/_jsxDEV(Card, {\n          style: cardInfo,\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: msg === null || msg === void 0 ? void 0 : msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"il+rrtUx5v3n7D7M7V3pwSwXxxA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noelflores/Documents/projects/tests/nuffsaid.com-react-messages/src/App.tsx"],"names":["React","useState","useEffect","generateMessage","Card","CardContent","styles","cardRow","flex","minWidth","cardError","marginBottom","backgroundColor","cardWarning","cardInfo","actionButton","App","errorMessages","setErrorMessages","warningMessages","setWarningMessages","infoMessages","setInfoMessages","isLoading","setIsLoading","loadingLabel","setLoadingLabel","handleClear","handleLoading","cleanUp","message","priority","oldMessages","container","actionButtons","cardContainer","length","map","msg"],"mappings":"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","sourcesContent":["import React, { CSSProperties, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport generateMessage, { Message } from \"./Api\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport styles from \"./App.module.scss\";\n\nconst cardRow: CSSProperties = {\n  flex: 1,\n  minWidth: \"350px\",\n};\n\nconst cardError: CSSProperties = {\n  marginBottom: \"15px\",\n  backgroundColor: \"#F56236\",\n};\n\nconst cardWarning: CSSProperties = {\n  marginBottom: \"15px\",\n  backgroundColor: \"#FCE788\",\n};\n\nconst cardInfo: CSSProperties = {\n  marginBottom: \"15px\",\n  backgroundColor: \"#88FCA3\",\n};\n\nconst actionButton: CSSProperties = {\n  backgroundColor: \"#88FCA3\",\n};\n\nconst App: React.FC<{}> = () => {\n  const [errorMessages, setErrorMessages] = useState<Message[]>([]);\n  const [warningMessages, setWarningMessages] = useState<Message[]>([]);\n  const [infoMessages, setInfoMessages] = useState<Message[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingLabel, setLoadingLabel] = useState(\"Stop\");\n\n  const handleClear = () => {\n    setErrorMessages([]);\n    setWarningMessages([]);\n    setInfoMessages([]);\n  };\n\n  const handleLoading = () => {\n    isLoading ? setIsLoading(false) : setIsLoading(true);\n    isLoading ? setLoadingLabel(\"Stop\") : setLoadingLabel(\"Play\");\n  };\n\n  useEffect(() => {\n    if (isLoading) {\n      const cleanUp = generateMessage((message: Message) => {\n        switch (message.priority) {\n          case 0:\n            setErrorMessages((oldMessages) => [...oldMessages, message]);\n            break;\n          case 1:\n            setWarningMessages((oldMessages) => [...oldMessages, message]);\n            break;\n          case 2:\n            setInfoMessages((oldMessages) => [...oldMessages, message]);\n            break;\n        }\n      });\n      return cleanUp;\n    }\n  }, [setErrorMessages, setWarningMessages, setInfoMessages, isLoading]);\n\n  return (\n    <div className={styles.container}>\n      <h1>nuffsaid.com Coding Challenge</h1>\n      <hr></hr>\n      <div className={styles.actionButtons}>\n        <button style={actionButton} onClick={() => setIsLoading(false)}>\n          Stop\n        </button>\n        <button style={actionButton} onClick={handleClear}>\n          Clear\n        </button>\n      </div>\n      <div className={styles.cardContainer}>\n        <div style={cardRow}>\n          <h2>Error type 1</h2>\n          <span>Count {errorMessages.length}</span>\n          {errorMessages?.map?.((msg) => (\n            <Card style={cardError} key={msg?.message}>\n              <CardContent>{msg?.message}</CardContent>\n            </Card>\n          ))}\n        </div>\n        <div style={cardRow}>\n          <h2>Error type 2</h2>\n          <span>Count {warningMessages.length}</span>\n          {warningMessages?.map?.((msg) => (\n            <Card style={cardWarning} key={msg?.message}>\n              <CardContent>{msg?.message}</CardContent>\n            </Card>\n          ))}\n        </div>\n        <div style={cardRow}>\n          <h2>Error type 3</h2>\n          <span>Count {infoMessages.length}</span>\n          {infoMessages?.map?.((msg) => (\n            <Card style={cardInfo}>\n              <CardContent>{msg?.message}</CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}